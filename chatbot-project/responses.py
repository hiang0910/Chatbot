import random
import re
from rapidfuzz import process, fuzz

RESPONSES = {
    # Ch√†o h·ªèi
  
    "ch√†o,hello,hey": [
        "Ch√†o b·∫°n üëã! ",
        "Xin ch√†o! B·∫°n c√≥ c·∫ßn h·ªó tr·ª£ th√¥ng tin v·ªÅ tr∆∞·ªùng kh√¥ng?",
        "Hello! R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n t·∫°i chatbot ƒë·∫°i h·ªçc ü§ñ."
    ],
    "c·∫£m ∆°n,thank": [
        "Kh√¥ng c√≥ g√¨ ƒë√¢u üòä.",
        "R·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n!",
        "Lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n üëç."
    ],
    "t·∫°m bi·ªát,bye": [
        "Ch√†o t·∫°m bi·ªát üëã, ch√∫c b·∫°n h·ªçc t·∫≠p t·ªët.",
        "H·∫πn g·∫∑p l·∫°i b·∫°n ·ªü th∆∞ vi·ªán üìö.",
        "Bye bye, nh·ªõ gi·ªØ s·ª©c kh·ªèe nh√©."
    ],

    # Th√¥ng tin tr∆∞·ªùng
    "tr∆∞·ªùng": [
        "Tr∆∞·ªùng m√¨nh c√≥ nhi·ªÅu khoa: CNTT, Kinh t·∫ø, Ng√¥n ng·ªØ, C∆° kh√≠‚Ä¶",
        "B·∫°n mu·ªën h·ªèi v·ªÅ c∆° s·ªü ch√≠nh hay c∆° s·ªü 2?",
        "Tr∆∞·ªùng c√≥ khu√¥n vi√™n r·ªông v·ªõi th∆∞ vi·ªán, cƒÉng tin v√† khu th·ªÉ thao."
    ],
    "khoa": [
        "C√°c khoa ti√™u bi·ªÉu: C√¥ng ngh·ªá Th√¥ng tin, Qu·∫£n tr·ªã Kinh doanh, ƒêi·ªán t·ª≠ Vi·ªÖn th√¥ng.",
        "Khoa CNTT ƒë√†o t·∫°o l·∫≠p tr√¨nh, AI, d·ªØ li·ªáu, an ninh m·∫°ng."
    ],
    "l·ªãch h·ªçc": [
        "L·ªãch h·ªçc ƒë∆∞·ª£c ƒëƒÉng tr√™n website ƒë√†o t·∫°o ho·∫∑c LMS c·ªßa tr∆∞·ªùng.",
        "B·∫°n c√≥ th·ªÉ ki·ªÉm tra l·ªãch h·ªçc tr√™n c·ªïng th√¥ng tin sinh vi√™n."
    ],
    "thi": [
        "L·ªãch thi th∆∞·ªùng ƒë∆∞·ª£c c√¥ng b·ªë tr∆∞·ªõc 2 tu·∫ßn.",
        "B·∫°n n√™n theo d√µi th√¥ng b√°o tr√™n ph√≤ng ƒë√†o t·∫°o."
    ],
    "ƒëi·ªÉm": [
        "ƒêi·ªÉm s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr√™n h·ªá th·ªëng sau khi thi 1-2 tu·∫ßn.",
        "N·∫øu ch∆∞a th·∫•y ƒëi·ªÉm, b·∫°n c√≥ th·ªÉ h·ªèi gi·∫£ng vi√™n b·ªô m√¥n."
    ],
    "h·ªçc ph√≠": [
        "H·ªçc ph√≠ t√πy theo s·ªë t√≠n ch·ªâ b·∫°n ƒëƒÉng k√Ω.",
        "B·∫°n c√≥ th·ªÉ ƒë√≥ng h·ªçc ph√≠ qua ng√¢n h√†ng ho·∫∑c v√≠ ƒëi·ªán t·ª≠ li√™n k·∫øt."
    ],
    "th∆∞ vi·ªán": [
        "Th∆∞ vi·ªán m·ªü c·ª≠a t·ª´ 7h30 ƒë·∫øn 20h.",
        "B·∫°n c·∫ßn th·∫ª sinh vi√™n ƒë·ªÉ m∆∞·ª£n s√°ch."
    ],
    "m∆∞·ª£n s√°ch": [
        "B·∫°n c√≥ th·ªÉ m∆∞·ª£n t·ªëi ƒëa 5 quy·ªÉn/l·∫ßn.",
        "Th·ªùi h·∫°n m∆∞·ª£n s√°ch l√† 14 ng√†y, c√≥ th·ªÉ gia h·∫°n."
    ],
    "c√¢u l·∫°c b·ªô": [
        "Tr∆∞·ªùng c√≥ nhi·ªÅu CLB: √¢m nh·∫°c, b√≥ng ƒë√°, kh·ªüi nghi·ªáp, ti·∫øng Anh.",
        "B·∫°n mu·ªën tham gia CLB n√†o? CNTT c≈©ng c√≥ CLB l·∫≠p tr√¨nh."
    ],
    "k√Ω t√∫c x√°": [
        "K√Ω t√∫c x√° c√≥ ph√≤ng 4 ng∆∞·ªùi v√† 8 ng∆∞·ªùi.",
        "B·∫°n c·∫ßn ƒëƒÉng k√Ω tr∆∞·ªõc m·ªói nƒÉm h·ªçc ƒë·ªÉ gi·ªØ ch·ªó."
    ],
    "ƒÉn u·ªëng": [
        "CƒÉng tin tr∆∞·ªùng c√≥ nhi·ªÅu m√≥n ƒÉn sinh vi√™n gi√° r·∫ª.",
        "Xung quanh tr∆∞·ªùng c≈©ng c√≥ nhi·ªÅu qu√°n c∆°m, tr√† s·ªØa."
    ],
    "gi·∫£ng vi√™n": [
        "Gi·∫£ng vi√™n tr∆∞·ªùng r·∫•t th√¢n thi·ªán v√† h·ªó tr·ª£ sinh vi√™n.",
        "B·∫°n c√≥ th·ªÉ li√™n h·ªá gi·∫£ng vi√™n qua email ho·∫∑c gi·ªù h√†nh ch√≠nh."
    ],
    "b√†i t·∫≠p": [
        "B√†i t·∫≠p s·∫Ω ƒë∆∞·ª£c giao tr√™n l·ªõp ho·∫∑c tr√™n h·ªá th·ªëng LMS.",
        "ƒê·ª´ng qu√™n n·ªôp b√†i ƒë√∫ng h·∫°n ƒë·ªÉ tr√°nh b·ªã tr·ª´ ƒëi·ªÉm."
    ],
    "ƒë·ªì √°n": [
        "ƒê·ªì √°n th∆∞·ªùng l√†m theo nh√≥m 3‚Äì5 ng∆∞·ªùi.",
        "Gi·∫£ng vi√™n s·∫Ω h∆∞·ªõng d·∫´n chi ti·∫øt y√™u c·∫ßu ƒë·ªì √°n."
    ],
    "h·ªçc b·ªïng": [
        "H·ªçc b·ªïng d·ª±a tr√™n ƒëi·ªÉm GPA v√† r√®n luy·ªán.",
        "Ngo√†i ra c√≤n c√≥ h·ªçc b·ªïng doanh nghi·ªáp t√†i tr·ª£."
    ],
    "h·ªó tr·ª£": [
        "B·∫°n c√≥ th·ªÉ li√™n h·ªá ph√≤ng c√¥ng t√°c sinh vi√™n ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.",
        "H·ªó tr·ª£ c√≥ th·ªÉ v·ªÅ t√†i ch√≠nh, t∆∞ v·∫•n t√¢m l√Ω ho·∫∑c t√¨m vi·ªác."
    ],
    "t·ªët nghi·ªáp": [
        "ƒêi·ªÅu ki·ªán t·ªët nghi·ªáp: ho√†n th√†nh t√≠n ch·ªâ v√† ƒë·∫°t chu·∫©n ƒë·∫ßu ra ngo·∫°i ng·ªØ.",
        "Sinh vi√™n c·∫ßn n·ªôp ƒë∆°n ƒëƒÉng k√Ω x√©t t·ªët nghi·ªáp t·∫°i ph√≤ng ƒë√†o t·∫°o."
    ]
}

def normalize_text(text: str) -> str:
    text = text.lower()
    text = re.sub(r'[^\w\s]', '', text)
    text = text.strip()
    return text

def get_response(user_input: str) -> str:
    text = normalize_text(user_input)
    if not text:
        return "B·∫°n h√£y nh·∫≠p c√¢u h·ªèi tr∆∞·ªõc nh√©."

    best_match, score, _ = process.extractOne(
        query=text,
        choices=RESPONSES.keys(),
        scorer=fuzz.WRatio
    )

    threshold = 40 if len(text) <= 3 else 50

    if best_match and score >= threshold:
        return random.choice(RESPONSES[best_match])

    return "Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu √Ω b·∫°n üòÖ. B·∫°n th·ª≠ h·ªèi theo c√°ch kh√°c nh√©."
